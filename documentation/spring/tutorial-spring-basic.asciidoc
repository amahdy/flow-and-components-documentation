---
title: Using Vaadin Flow with Spring Boot
order: 1
layout: page
---


= Using Vaadin Flow with Spring Boot

The https://vaadin.com/directory/component/vaadin-spring/[Vaadin Spring] add-on allows you to use Vaadin Flow with https://spring.io/projects/spring-boot[Spring Boot]. 

https://spring.io/projects/spring-boot[Spring Boot] speeds up the development process and provides a fast and efficient development environment. It is the easiest way to use the Spring framework. 

[NOTE]
See <<tutorial-spring-basic-mvc#,Using Flow with Spring MVC>> to learn how to use https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html[Spring MVC] to create a Spring web application, without Spring Boot. 


== Enabling Spring Boot

To enable Spring Boot under the hood in Vaadin Flow, all you need to do is write one simple servlet initializer class.

*Example*: `ExampleServletInitializer` class.

[source,java]
----
@SpringBootApplication
public class ExampleServletInitializer extends SpringBootServletInitializer {

}
----

* The `@SpringBootApplication` annotation enables Spring Boot under the hood. This includes Spring configuration, component scanning and auto-configuration.
* Your class must extend the `SpringBootServletInitializer` interface. This interface facilitates running a Spring application from a WAR deployment. 


== Adding Dependencies

Once the `vaadin-spring` add-on is available in your classpath, no further Vaadin Flow classes are needed in the class declaration. This is one of the major benefits of Spring Boot's auto-configuration feature.

If you are a `vaadin-platform` user, you should add the dependencies shown below in your `pom.xml`.

*Example* Spring Boot dependencies in `pom.xml`. 

[source,xml]
----
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-bom</artifactId>
            <version>${vaadin.version}</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>
</dependencyManagement>

<dependencies>
    <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-spring-boot-starter</artifactId>
        <version>${vaadin.version}</version>
    </dependency>

    <!-- Spring -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${spring-boot.version}</version>
        <exclusions>
            <exclusion>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
        </exclusions>
    </dependency>

    <!-- other -->
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <version>3.1.0</version>
        <scope>provided</scope>
    </dependency>
</dependencies>
----
* The `vaadin-bom` dependency in the `dependencyManagement` section ensures ......

* The exclusion of `spring-boot-starter-web` in the `Spring` dependency section, helps to avoid classpath collisions when running your application as a deployable WAR. Other than this it has no relevance in this example.   


[NOTE]
To make it possible to use the `vaadin-spring` add-on with Spring Boot, the add-on does not declare compile dependency to Spring Boot (it does not appear transitively). You need to declare it explicitly. 

== Handling URLs 

To handle URLs, you need at least one Vaadin Flow class in your application.

*Example*: Using the `@Route` annotation to define `HelloComponent` as the default route target. 

[source,java]
----
@Route("")
public class HelloComponent extends Div {
    public HelloComponent(){
        setText("Hello world!");
    }
}
----

== Adding a Main Method

In order to run a Spring Boot application as a plain Java application, you need to add a main method to your <<enabling-spring-boot,servlet initializer class>>.

*Example*: Adding a `main` method to `ExampleServletInitializer`. 


[source,java]
----
@SpringBootApplication
public class ExampleServletInitializer extends SpringBootServletInitializer {
    public static void main(String[] args) {
        SpringApplication.run(ExampleServletInitializer.class, args);
    }
}
----

== Running the Application

Other than those detailed above, there are no other requirements. When you start the Java application, Spring Boot starts its embedded web server.

[NOTE]
You should remove the exclusion from the `spring-boot-starter-web` dependency in the `pom.xml` snippet above.


== Upload Component Issue

When using the https://vaadin.com/components/vaadin-upload[Vaadin Upload component] and <<../routing/tutorial-routing-annotation#,root mapping>>, you need to disable the Spring Boot multipart upload resolver, by adding the `spring.servlet.multipart.enabled = false` property to your `application.properties` file. 

You can follow this issue on https://github.com/vaadin/spring/issues/381[GitHub].

== Getting Started with Spring Boot Tutorial

https://github.com/vaadin/flow-spring-tutorial[Vaadin Spring Tutorial] is a prebuilt example application that showcases basic usage of  Vaadin Flow and Spring Boot. You can use it to test the concepts and features covered in this documentation.

To start a new project with Spring Boot and Vaadin Flow, clone the https://github.com/vaadin/flow-spring-tutorial[flow-spring-tutorial] repository. This project template has the necessary configuration and dependencies to start building you own application.

Commercial customers can use the https://vaadin.com/start/latest/full-stack-spring[Vaadin Bakery App Starter for Flow and Spring] that includes the fully-functional https://vaadin.com/docs/v13/bakeryflow/overview.html[Bakery app]. 
